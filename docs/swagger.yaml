basePath: /
definitions:
  BadRequestError:
    properties:
      error:
        example: Bad Request
        type: string
      success:
        example: false
        type: boolean
    type: object
  EmailOTPRequest:
    properties:
      email:
        example: john.doe@gmail.com
        type: string
      otp:
        example: "123456"
        type: string
    required:
    - email
    - otp
    type: object
  InternalServerError:
    properties:
      error:
        example: Internal Server Error
        type: string
      success:
        example: false
        type: boolean
    type: object
  LoadDataSuccess:
    properties:
      data:
        example: Data inserted successfully!
        type: string
      success:
        example: true
        type: boolean
    type: object
  LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  ResendEmailRequest:
    properties:
      email:
        example: john.doe@gmail.com
        type: string
    required:
    - email
    type: object
  Success-LoginResponse:
    properties:
      data:
        $ref: '#/definitions/models.LoginResponse'
      success:
        example: true
        type: boolean
    type: object
  UnauthorizedError:
    properties:
      error:
        example: Unauthorized
        type: string
      success:
        example: false
        type: boolean
    type: object
  UserRegisterSuccess:
    properties:
      data:
        example: Please verify your Email Address. We have sent an OTP to the Email
          Address.
        type: string
      success:
        example: true
        type: boolean
    type: object
  UserRequest:
    properties:
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      phone:
        type: string
      role_id:
        type: string
    required:
    - email
    - first_name
    - last_name
    - phone
    - role_id
    type: object
  UserResponse:
    properties:
      email:
        example: john.doe@gmail.com
        type: string
      first_name:
        example: John
        type: string
      full_name:
        example: John Doe
        type: string
      is_deleted:
        example: false
        type: boolean
      last_name:
        example: Doe
        type: string
      phone:
        example: "1234567890"
        type: string
      role_id:
        example: 97d699c0-24ff-48dc-b64a-c29353fa8865
        type: string
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  models.LoginResponse:
    properties:
      expiry:
        example: "2025-05-01T12:00:00Z"
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      user_details:
        $ref: '#/definitions/UserResponse'
    type: object
  models.Role:
    properties:
      code:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_deleted:
        type: boolean
      name:
        description: baseModel
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      first_name:
        description: baseModel
        maxLength: 50
        minLength: 2
        type: string
      id:
        type: string
      is_deleted:
        type: boolean
      is_verified:
        type: boolean
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/models.Role'
      role_id:
        type: string
      updated_at:
        type: string
      user_password:
        $ref: '#/definitions/models.UserPassword'
    required:
    - email
    - first_name
    - last_name
    - phone
    type: object
  models.UserPassword:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      is_deleted:
        type: boolean
      password:
        description: baseModel
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: vaibhav.jaiswal@gmail.com
    name: Vaibhav Jaiswal
  description: This is the API documentation for E-Commerce
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: E-Commerce API
  version: "1.0"
paths:
  /load-data:
    get:
      description: Loads static reference data (e.g., categories, roles, etc.) into
        the database from predefined JSON files. This is typically used during application
        setup or environment bootstrap.
      produces:
      - application/json
      responses:
        "200":
          description: Data loaded successfully from JSON files
          schema:
            $ref: '#/definitions/LoadDataSuccess'
        "500":
          description: Error occurred while loading data
          schema:
            $ref: '#/definitions/InternalServerError'
      summary: Preload Static Data
      tags:
      - Admin
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user using email and password. Returns a JWT token
        on successful login that can be used to authorize future requests.
      parameters:
      - description: User login credentials
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authenticated successfully with JWT token
          schema:
            $ref: '#/definitions/Success-LoginResponse'
        "400":
          description: Invalid or malformed request body
          schema:
            $ref: '#/definitions/BadRequestError'
        "401":
          description: Invalid credentials or unauthorized access
          schema:
            $ref: '#/definitions/UnauthorizedError'
        "500":
          description: Unexpected server error
          schema:
            $ref: '#/definitions/InternalServerError'
      summary: User Login
      tags:
      - Authentication
  /user/{id}:
    get:
      description: Retrieves a user's details by their unique ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User data fetched successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid ID or user not found
          schema:
            $ref: '#/definitions/BadRequestError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'
      summary: Get User by ID
      tags:
      - Users
  /user/register:
    post:
      consumes:
      - application/json
      description: Registers a new user account by accepting valid email and other
        details. On success, returns the success message. Input validation and uniqueness
        checks are enforced.
      parameters:
      - description: User registration payload
        in: body
        name: userDetails
        required: true
        schema:
          $ref: '#/definitions/UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Registration successful
          schema:
            $ref: '#/definitions/UserRegisterSuccess'
        "400":
          description: Invalid input or missing required fields
          schema:
            $ref: '#/definitions/BadRequestError'
        "401":
          description: Unauthorized access attempt
          schema:
            $ref: '#/definitions/UnauthorizedError'
        "500":
          description: Unexpected server error
          schema:
            $ref: '#/definitions/InternalServerError'
      summary: Register a New User
      tags:
      - User Registration
  /user/resend-verification:
    post:
      consumes:
      - application/json
      description: Resends a verification code to the user's email address.
      parameters:
      - description: Email for which to resend OTP
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ResendEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Missing or invalid email
          schema:
            $ref: '#/definitions/BadRequestError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'
      summary: Resend Verification Code
      tags:
      - User Registration
  /user/verify-email:
    post:
      consumes:
      - application/json
      description: Verifies a user's email address using an OTP sent to their email.
      parameters:
      - description: Email and OTP
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/EmailOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User verified successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Missing or invalid OTP/email
          schema:
            $ref: '#/definitions/BadRequestError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'
      summary: Verify Email with OTP
      tags:
      - User Registration
  /users:
    get:
      consumes:
      - application/json
      description: Returns a list of users with optional filter/query parameters.
      parameters:
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: Filter by active status
        in: query
        name: is_active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/BadRequestError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'
      summary: Get Users with Filters
      tags:
      - Users
schemes:
- http
swagger: "2.0"
