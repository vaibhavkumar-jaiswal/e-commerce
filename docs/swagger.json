{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is the API documentation for E-Commerce",
        "title": "E-Commerce API",
        "contact": {
            "name": "Vaibhav Jaiswal",
            "email": "vaibhav.jaiswal@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/load-data": {
            "get": {
                "description": "Loads static reference data (e.g., categories, roles, etc.) into the database from predefined JSON files. This is typically used during application setup or environment bootstrap.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Preload Static Data",
                "responses": {
                    "200": {
                        "description": "Data loaded successfully from JSON files",
                        "schema": {
                            "$ref": "#/definitions/LoadDataSuccess"
                        }
                    },
                    "500": {
                        "description": "Error occurred while loading data",
                        "schema": {
                            "$ref": "#/definitions/InternalServerError"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticates a user using email and password. Returns a JWT token on successful login that can be used to authorize future requests.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "loginData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authenticated successfully with JWT token",
                        "schema": {
                            "$ref": "#/definitions/Success-LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid or malformed request body",
                        "schema": {
                            "$ref": "#/definitions/BadRequestError"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials or unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/UnauthorizedError"
                        }
                    },
                    "500": {
                        "description": "Unexpected server error",
                        "schema": {
                            "$ref": "#/definitions/InternalServerError"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Registers a new user account by accepting valid email and other details. On success, returns the success message. Input validation and uniqueness checks are enforced.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Registration"
                ],
                "summary": "Register a New User",
                "parameters": [
                    {
                        "description": "User registration payload",
                        "name": "userDetails",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration successful",
                        "schema": {
                            "$ref": "#/definitions/UserRegisterSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid input or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/BadRequestError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access attempt",
                        "schema": {
                            "$ref": "#/definitions/UnauthorizedError"
                        }
                    },
                    "500": {
                        "description": "Unexpected server error",
                        "schema": {
                            "$ref": "#/definitions/InternalServerError"
                        }
                    }
                }
            }
        },
        "/user/resend-verification": {
            "post": {
                "description": "Resends a verification code to the user's email address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Registration"
                ],
                "summary": "Resend Verification Code",
                "parameters": [
                    {
                        "description": "Email for which to resend OTP",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResendEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid email",
                        "schema": {
                            "$ref": "#/definitions/BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/InternalServerError"
                        }
                    }
                }
            }
        },
        "/user/verify-email": {
            "post": {
                "description": "Verifies a user's email address using an OTP sent to their email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Registration"
                ],
                "summary": "Verify Email with OTP",
                "parameters": [
                    {
                        "description": "Email and OTP",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EmailOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User verified successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid OTP/email",
                        "schema": {
                            "$ref": "#/definitions/BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/InternalServerError"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "description": "Retrieves a user's details by their unique ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get User by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User data fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or user not found",
                        "schema": {
                            "$ref": "#/definitions/BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/InternalServerError"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Returns a list of users with optional filter/query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get Users with Filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by email",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "is_active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/InternalServerError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "BadRequestError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Bad Request"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "EmailOTPRequest": {
            "type": "object",
            "required": [
                "email",
                "otp"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@gmail.com"
                },
                "otp": {
                    "type": "string",
                    "example": "123456"
                }
            }
        },
        "InternalServerError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Internal Server Error"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "LoadDataSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "Data inserted successfully!"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "password123"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "ResendEmailRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@gmail.com"
                }
            }
        },
        "Success-LoginResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.LoginResponse"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "UnauthorizedError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Unauthorized"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "UserRegisterSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "Please verify your Email Address. We have sent an OTP to the Email Address."
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "UserRequest": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "phone",
                "role_id"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "phone": {
                    "type": "string"
                },
                "role_id": {
                    "type": "string"
                }
            }
        },
        "UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@gmail.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "full_name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "phone": {
                    "type": "string",
                    "example": "1234567890"
                },
                "role_id": {
                    "type": "string",
                    "example": "97d699c0-24ff-48dc-b64a-c29353fa8865"
                },
                "user_id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                }
            }
        },
        "models.LoginResponse": {
            "type": "object",
            "properties": {
                "expiry": {
                    "type": "string",
                    "example": "2025-05-01T12:00:00Z"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                },
                "user_details": {
                    "$ref": "#/definitions/UserResponse"
                }
            }
        },
        "models.Role": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "role_id": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "description": "User model",
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "phone"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "is_verified": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/models.Role"
                },
                "role_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "user_passwords": {
                    "$ref": "#/definitions/models.UserPassword"
                }
            }
        },
        "models.UserPassword": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "user_password_id": {
                    "type": "string"
                }
            }
        }
    }
}